name: Release

on:
  push:
    branches: [ "main", "master" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
      - '.github/workflows/**'

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'chore(release)') }}
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_upload_url: ${{ steps.semantic.outputs.new_release_upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'npm'
      
      - name: Install semantic-release and plugins
        run: |
          npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/exec
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      
      - name: Install cargo-edit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-edit

      - name: Setup Git User
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
      
      - name: Semantic Release
        id: semantic
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  build-release-binaries:
    name: Build Release Binaries
    needs: release
    if: needs.release.outputs.new_release_published == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: nhale-cli
            asset_name: nhale-cli-linux-amd64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: nhale-cli
            asset_name: nhale-cli-macos-amd64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: nhale-cli.exe
            asset_name: nhale-cli-windows-amd64.zip
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      
      - name: Build Binary
        run: cargo build --release --bin nhale-cli --target ${{ matrix.target }}
      
      - name: Prepare Artifacts (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/nhale
          cp LICENSE release/
          cp README.md release/
          cd release
          tar czf ../${{ matrix.asset_name }} *
      
      - name: Prepare Artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir release
          copy target\${{ matrix.target }}\release\${{ matrix.artifact_name }} release\nhale.exe
          copy LICENSE release\
          copy README.md release\
          Compress-Archive -Path release\* -DestinationPath ${{ matrix.asset_name }}
        shell: pwsh
      
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.asset_name }}
          tag_name: v${{ needs.release.outputs.new_release_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 